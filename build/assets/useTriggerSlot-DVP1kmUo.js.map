{"version":3,"file":"useTriggerSlot-DVP1kmUo.js","sources":["../../node_modules/.pnpm/@fluentui+react-tabster@9.2_abb1d66b8610fd07cfe960e8c778f3f7/node_modules/@fluentui/react-tabster/lib/hooks/useOnKeyboardNavigationChange.js","../../node_modules/.pnpm/@fluentui+react-tabster@9.2_abb1d66b8610fd07cfe960e8c778f3f7/node_modules/@fluentui/react-tabster/lib/hooks/useSetKeyboardNavigation.js","../../node_modules/.pnpm/@fluentui+react-aria@9.14.4_ad64347d64f69045ea6c6d36b098b0d3/node_modules/@fluentui/react-aria/lib/activedescendant/useOptionWalker.js","../../node_modules/.pnpm/@fluentui+react-aria@9.14.4_ad64347d64f69045ea6c6d36b098b0d3/node_modules/@fluentui/react-aria/lib/activedescendant/constants.js","../../node_modules/.pnpm/@fluentui+react-aria@9.14.4_ad64347d64f69045ea6c6d36b098b0d3/node_modules/@fluentui/react-aria/lib/activedescendant/scrollIntoView.js","../../node_modules/.pnpm/@fluentui+react-aria@9.14.4_ad64347d64f69045ea6c6d36b098b0d3/node_modules/@fluentui/react-aria/lib/activedescendant/useActiveDescendant.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/contexts/useListboxContextValues.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/utils/dropdownKeyActions.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/utils/useOptionCollection.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/utils/useSelection.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/components/Listbox/useListbox.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/components/Listbox/renderListbox.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/components/Listbox/useListboxStyles.styles.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/components/Listbox/Listbox.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/utils/useComboboxBaseState.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/utils/useListboxSlot.js","../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/utils/useTriggerSlot.js"],"sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { useKeyborgRef } from './useKeyborgRef';\n/**\n * Instantiates [keyborg](https://github.com/microsoft/keyborg) and subscribes to changes\n * in the keyboard navigation mode.\n *\n * @param callback - called every time the keyboard navigation state changes\n */ export function useOnKeyboardNavigationChange(callback) {\n    const keyborgRef = useKeyborgRef();\n    const eventCallback = useEventCallback(callback);\n    React.useEffect(()=>{\n        const keyborg = keyborgRef.current;\n        if (keyborg) {\n            const cb = (next)=>{\n                eventCallback(next);\n            };\n            keyborg.subscribe(cb);\n            cb(keyborg.isNavigatingWithKeyboard());\n            return ()=>{\n                keyborg.unsubscribe(cb);\n            };\n        }\n    }, [\n        keyborgRef,\n        eventCallback\n    ]);\n}\n","import * as React from 'react';\nimport { useKeyborgRef } from './useKeyborgRef';\n/**\n */ export function useSetKeyboardNavigation() {\n    const keyborgRef = useKeyborgRef();\n    return React.useCallback((isNavigatingWithKeyboard)=>{\n        var _keyborgRef_current;\n        (_keyborgRef_current = keyborgRef.current) === null || _keyborgRef_current === void 0 ? void 0 : _keyborgRef_current.setVal(isNavigatingWithKeyboard);\n    }, [\n        keyborgRef\n    ]);\n}\n","import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { isHTMLElement } from '@fluentui/react-utilities';\nexport function useOptionWalker(options) {\n    const { matchOption } = options;\n    const { targetDocument } = useFluent();\n    const treeWalkerRef = React.useRef(null);\n    const listboxRef = React.useRef(null);\n    const optionFilter = React.useCallback((node)=>{\n        if (isHTMLElement(node) && matchOption(node)) {\n            return NodeFilter.FILTER_ACCEPT;\n        }\n        return NodeFilter.FILTER_SKIP;\n    }, [\n        matchOption\n    ]);\n    const setListbox = React.useCallback((el)=>{\n        if (el && targetDocument) {\n            listboxRef.current = el;\n            treeWalkerRef.current = targetDocument.createTreeWalker(el, NodeFilter.SHOW_ELEMENT, optionFilter);\n        } else {\n            listboxRef.current = null;\n        }\n    }, [\n        targetDocument,\n        optionFilter\n    ]);\n    const optionWalker = React.useMemo(()=>({\n            first: ()=>{\n                if (!treeWalkerRef.current || !listboxRef.current) {\n                    return null;\n                }\n                treeWalkerRef.current.currentNode = listboxRef.current;\n                return treeWalkerRef.current.firstChild();\n            },\n            last: ()=>{\n                if (!treeWalkerRef.current || !listboxRef.current) {\n                    return null;\n                }\n                treeWalkerRef.current.currentNode = listboxRef.current;\n                return treeWalkerRef.current.lastChild();\n            },\n            next: ()=>{\n                if (!treeWalkerRef.current) {\n                    return null;\n                }\n                return treeWalkerRef.current.nextNode();\n            },\n            prev: ()=>{\n                if (!treeWalkerRef.current) {\n                    return null;\n                }\n                return treeWalkerRef.current.previousNode();\n            },\n            find: (predicate, startFrom)=>{\n                if (!treeWalkerRef.current || !listboxRef.current) {\n                    return null;\n                }\n                const start = startFrom ? targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.getElementById(startFrom) : null;\n                treeWalkerRef.current.currentNode = start !== null && start !== void 0 ? start : listboxRef.current;\n                let cur = treeWalkerRef.current.currentNode;\n                while(cur && !predicate(cur.id)){\n                    cur = treeWalkerRef.current.nextNode();\n                }\n                return cur;\n            },\n            setCurrent: (el)=>{\n                if (!treeWalkerRef.current) {\n                    return;\n                }\n                treeWalkerRef.current.currentNode = el;\n            }\n        }), [\n        targetDocument\n    ]);\n    return {\n        optionWalker,\n        listboxCallbackRef: setListbox\n    };\n}\n","/**\n * Applied to the element that is active descendant\n */ export const ACTIVEDESCENDANT_ATTRIBUTE = 'data-activedescendant';\n/**\n * Applied to the active descendant when the user is navigating with keyboard\n */ export const ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE = 'data-activedescendant-focusvisible';\n","export const scrollIntoView = (target)=>{\n    if (!target) {\n        return;\n    }\n    const scrollParent = findScrollableParent(target.parentElement);\n    if (!scrollParent) {\n        return;\n    }\n    const { offsetHeight } = target;\n    const offsetTop = getTotalOffsetTop(target, scrollParent);\n    const { scrollMarginTop, scrollMarginBottom } = getScrollMargins(target);\n    const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;\n    const isAbove = offsetTop - scrollMarginTop < scrollTop;\n    const isBelow = offsetTop + offsetHeight + scrollMarginBottom > scrollTop + parentOffsetHeight;\n    const buffer = 2;\n    if (isAbove) {\n        scrollParent.scrollTo(0, offsetTop - scrollMarginTop - buffer);\n    } else if (isBelow) {\n        scrollParent.scrollTo(0, offsetTop + offsetHeight + scrollMarginBottom - parentOffsetHeight + buffer);\n    }\n};\nconst findScrollableParent = (element)=>{\n    if (!element) {\n        return null;\n    }\n    if (element.scrollHeight > element.offsetHeight) {\n        return element;\n    }\n    return findScrollableParent(element.parentElement);\n};\nconst getTotalOffsetTop = (element, scrollParent)=>{\n    if (!element || element === scrollParent) {\n        return 0;\n    }\n    if (element.contains(scrollParent)) {\n        // subtract the scroll parent's offset top from the running total if the offsetParent is above it\n        return scrollParent.offsetTop * -1;\n    }\n    return element.offsetTop + getTotalOffsetTop(element.offsetParent, scrollParent);\n};\nconst getScrollMargins = (element)=>{\n    var _element_ownerDocument;\n    const win = (_element_ownerDocument = element.ownerDocument) === null || _element_ownerDocument === void 0 ? void 0 : _element_ownerDocument.defaultView;\n    if (!win) {\n        return {\n            scrollMarginTop: 0,\n            scrollMarginBottom: 0\n        };\n    }\n    const computedStyles = win.getComputedStyle(element);\n    var _getIntValueOfComputedStyle;\n    const scrollMarginTop = (_getIntValueOfComputedStyle = getIntValueOfComputedStyle(computedStyles.scrollMarginTop)) !== null && _getIntValueOfComputedStyle !== void 0 ? _getIntValueOfComputedStyle : getIntValueOfComputedStyle(computedStyles.scrollMarginBlockStart);\n    var _getIntValueOfComputedStyle1;\n    const scrollMarginBottom = (_getIntValueOfComputedStyle1 = getIntValueOfComputedStyle(computedStyles.scrollMarginBottom)) !== null && _getIntValueOfComputedStyle1 !== void 0 ? _getIntValueOfComputedStyle1 : getIntValueOfComputedStyle(computedStyles.scrollMarginBlockEnd);\n    return {\n        scrollMarginTop,\n        scrollMarginBottom\n    };\n};\nconst getIntValueOfComputedStyle = (computedStyle)=>{\n    return computedStyle ? parseInt(computedStyle, 10) : 0;\n};\n","import * as React from 'react';\nimport { useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { useOnKeyboardNavigationChange } from '@fluentui/react-tabster';\nimport { useOptionWalker } from './useOptionWalker';\nimport { ACTIVEDESCENDANT_ATTRIBUTE, ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE } from './constants';\nimport { scrollIntoView } from './scrollIntoView';\nexport const createActiveDescendantChangeEvent = (detail)=>new CustomEvent('activedescendantchange', {\n        bubbles: true,\n        cancelable: false,\n        composed: true,\n        detail\n    });\nexport function useActiveDescendant(options) {\n    const { imperativeRef, matchOption: matchOptionUnstable } = options;\n    const focusVisibleRef = React.useRef(false);\n    const shouldShowFocusVisibleAttrRef = React.useRef(true);\n    const activeIdRef = React.useRef(null);\n    const lastActiveIdRef = React.useRef(null);\n    const activeParentRef = React.useRef(null);\n    const attributeVisibilityRef = React.useRef(true);\n    const removeAttribute = React.useCallback(()=>{\n        var _activeParentRef_current;\n        (_activeParentRef_current = activeParentRef.current) === null || _activeParentRef_current === void 0 ? void 0 : _activeParentRef_current.removeAttribute('aria-activedescendant');\n    }, []);\n    const setAttribute = React.useCallback((id)=>{\n        if (id) {\n            activeIdRef.current = id;\n        }\n        if (attributeVisibilityRef.current && activeIdRef.current) {\n            var _activeParentRef_current;\n            (_activeParentRef_current = activeParentRef.current) === null || _activeParentRef_current === void 0 ? void 0 : _activeParentRef_current.setAttribute('aria-activedescendant', activeIdRef.current);\n        }\n    }, []);\n    useOnKeyboardNavigationChange((isNavigatingWithKeyboard)=>{\n        focusVisibleRef.current = isNavigatingWithKeyboard;\n        const active = getActiveDescendant();\n        if (!active) {\n            return;\n        }\n        if (isNavigatingWithKeyboard && shouldShowFocusVisibleAttrRef.current) {\n            active.setAttribute(ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE, '');\n        } else {\n            active.removeAttribute(ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE);\n        }\n    });\n    const matchOption = useEventCallback(matchOptionUnstable);\n    const listboxRef = React.useRef(null);\n    const { optionWalker, listboxCallbackRef } = useOptionWalker({\n        matchOption\n    });\n    const getActiveDescendant = React.useCallback(()=>{\n        var _listboxRef_current;\n        return (_listboxRef_current = listboxRef.current) === null || _listboxRef_current === void 0 ? void 0 : _listboxRef_current.querySelector(`#${activeIdRef.current}`);\n    }, [\n        listboxRef\n    ]);\n    const setShouldShowFocusVisibleAttribute = React.useCallback((shouldShow)=>{\n        shouldShowFocusVisibleAttrRef.current = shouldShow;\n        const active = getActiveDescendant();\n        if (!active) {\n            return;\n        }\n        if (shouldShow && focusVisibleRef.current) {\n            active.setAttribute(ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE, '');\n        } else {\n            active.removeAttribute(ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE);\n        }\n    }, [\n        getActiveDescendant\n    ]);\n    const blurActiveDescendant = React.useCallback(()=>{\n        const active = getActiveDescendant();\n        if (active) {\n            active.removeAttribute(ACTIVEDESCENDANT_ATTRIBUTE);\n            active.removeAttribute(ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE);\n        }\n        removeAttribute();\n        lastActiveIdRef.current = activeIdRef.current;\n        activeIdRef.current = null;\n        var _active_id;\n        return (_active_id = active === null || active === void 0 ? void 0 : active.id) !== null && _active_id !== void 0 ? _active_id : null;\n    }, [\n        getActiveDescendant,\n        removeAttribute\n    ]);\n    const focusActiveDescendant = React.useCallback((nextActive)=>{\n        if (!nextActive) {\n            return;\n        }\n        const previousActiveId = blurActiveDescendant();\n        scrollIntoView(nextActive);\n        setAttribute(nextActive.id);\n        nextActive.setAttribute(ACTIVEDESCENDANT_ATTRIBUTE, '');\n        if (focusVisibleRef.current && shouldShowFocusVisibleAttrRef.current) {\n            nextActive.setAttribute(ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE, '');\n        }\n        const event = createActiveDescendantChangeEvent({\n            id: nextActive.id,\n            previousId: previousActiveId\n        });\n        nextActive.dispatchEvent(event);\n    }, [\n        blurActiveDescendant,\n        setAttribute\n    ]);\n    const controller = React.useMemo(()=>({\n            first: ({ passive } = {})=>{\n                const first = optionWalker.first();\n                if (!passive) {\n                    focusActiveDescendant(first);\n                }\n                return first === null || first === void 0 ? void 0 : first.id;\n            },\n            last: ({ passive } = {})=>{\n                const last = optionWalker.last();\n                if (!passive) {\n                    focusActiveDescendant(last);\n                }\n                return last === null || last === void 0 ? void 0 : last.id;\n            },\n            next: ({ passive } = {})=>{\n                const active = getActiveDescendant();\n                if (!active) {\n                    return;\n                }\n                optionWalker.setCurrent(active);\n                const next = optionWalker.next();\n                if (!passive) {\n                    focusActiveDescendant(next);\n                }\n                return next === null || next === void 0 ? void 0 : next.id;\n            },\n            prev: ({ passive } = {})=>{\n                const active = getActiveDescendant();\n                if (!active) {\n                    return;\n                }\n                optionWalker.setCurrent(active);\n                const next = optionWalker.prev();\n                if (!passive) {\n                    focusActiveDescendant(next);\n                }\n                return next === null || next === void 0 ? void 0 : next.id;\n            },\n            blur: ()=>{\n                blurActiveDescendant();\n            },\n            active: ()=>{\n                var _getActiveDescendant;\n                return (_getActiveDescendant = getActiveDescendant()) === null || _getActiveDescendant === void 0 ? void 0 : _getActiveDescendant.id;\n            },\n            focus: (id)=>{\n                if (!listboxRef.current) {\n                    return;\n                }\n                const target = listboxRef.current.querySelector(`#${id}`);\n                if (target) {\n                    focusActiveDescendant(target);\n                }\n            },\n            focusLastActive: ()=>{\n                if (!listboxRef.current || !lastActiveIdRef.current) {\n                    return;\n                }\n                const target = listboxRef.current.querySelector(`#${lastActiveIdRef.current}`);\n                if (target) {\n                    focusActiveDescendant(target);\n                    return true;\n                }\n            },\n            find (predicate, { passive, startFrom } = {}) {\n                const target = optionWalker.find(predicate, startFrom);\n                if (!passive) {\n                    focusActiveDescendant(target);\n                }\n                return target === null || target === void 0 ? void 0 : target.id;\n            },\n            scrollActiveIntoView: ()=>{\n                if (!listboxRef.current) {\n                    return;\n                }\n                const active = getActiveDescendant();\n                if (!active) {\n                    return;\n                }\n                scrollIntoView(active);\n            },\n            showAttributes () {\n                attributeVisibilityRef.current = true;\n                setAttribute();\n            },\n            hideAttributes () {\n                attributeVisibilityRef.current = false;\n                removeAttribute();\n            },\n            showFocusVisibleAttributes () {\n                setShouldShowFocusVisibleAttribute(true);\n            },\n            hideFocusVisibleAttributes () {\n                setShouldShowFocusVisibleAttribute(false);\n            }\n        }), [\n        optionWalker,\n        listboxRef,\n        setAttribute,\n        removeAttribute,\n        focusActiveDescendant,\n        blurActiveDescendant,\n        getActiveDescendant,\n        setShouldShowFocusVisibleAttribute\n    ]);\n    React.useImperativeHandle(imperativeRef, ()=>controller);\n    return {\n        listboxRef: useMergedRefs(listboxRef, listboxCallbackRef),\n        activeParentRef,\n        controller\n    };\n}\n","import * as React from 'react';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\nimport { ListboxContext, useListboxContext_unstable } from './ListboxContext';\nexport function useListboxContextValues(state) {\n    const hasListboxContext = useHasParentContext(ListboxContext);\n    const { getOptionById, getOptionsMatchingValue, multiselect, registerOption, selectedOptions, selectOption, activeDescendantController } = state;\n    // get register/unregister functions from parent combobox context\n    const parentRegisterOption = useListboxContext_unstable((ctx)=>ctx.registerOption);\n    const onOptionClick = useListboxContext_unstable((ctx)=>ctx.onOptionClick);\n    const onActiveDescendantChange = useListboxContext_unstable((ctx)=>ctx.onActiveDescendantChange);\n    const registerOptionValue = hasListboxContext ? parentRegisterOption : registerOption;\n    const listbox = {\n        activeOption: undefined,\n        focusVisible: false,\n        getOptionById,\n        getOptionsMatchingValue,\n        multiselect,\n        registerOption: registerOptionValue,\n        selectedOptions,\n        selectOption,\n        setActiveOption: ()=>undefined,\n        onOptionClick,\n        onActiveDescendantChange\n    };\n    const activeDescendant = React.useMemo(()=>({\n            controller: activeDescendantController\n        }), [\n        activeDescendantController\n    ]);\n    return {\n        listbox,\n        activeDescendant\n    };\n}\n","import * as keys from '@fluentui/keyboard-keys';\nimport * as React from 'react';\n/**\n * Converts a keyboard interaction into a defined action\n */ export function getDropdownActionFromKey(e, options = {}) {\n    const { open = true, multiselect = false } = options;\n    const code = e.key;\n    const { altKey, ctrlKey, key, metaKey } = e;\n    // typing action occurs whether open or closed\n    if (key.length === 1 && code !== keys.Space && !altKey && !ctrlKey && !metaKey) {\n        return 'Type';\n    }\n    // handle opening the dropdown if closed\n    if (!open) {\n        if (code === keys.ArrowDown || code === keys.ArrowUp || code === keys.Enter || code === keys.Space) {\n            return 'Open';\n        }\n        // if the dropdown is closed and an action did not match the above, do nothing\n        return 'None';\n    }\n    // select or close actions\n    if (code === keys.ArrowUp && altKey || code === keys.Enter || !multiselect && code === keys.Space) {\n        return 'CloseSelect';\n    }\n    if (multiselect && code === keys.Space) {\n        return 'Select';\n    }\n    if (code === keys.Escape) {\n        return 'Close';\n    }\n    // navigation interactions\n    if (code === keys.ArrowDown) {\n        return 'Next';\n    }\n    if (code === keys.ArrowUp) {\n        return 'Previous';\n    }\n    if (code === keys.Home) {\n        return 'First';\n    }\n    if (code === keys.End) {\n        return 'Last';\n    }\n    if (code === keys.PageUp) {\n        return 'PageUp';\n    }\n    if (code === keys.PageDown) {\n        return 'PageDown';\n    }\n    if (code === keys.Tab) {\n        return 'Tab';\n    }\n    // if nothing matched, return none\n    return 'None';\n}\n","import * as React from 'react';\n/**\n * A hook for managing a collection of child Options\n */ export const useOptionCollection = ()=>{\n    const optionsById = React.useRef(new Map());\n    const collectionAPI = React.useMemo(()=>{\n        const getCount = ()=>optionsById.current.size;\n        // index searches are no longer used\n        const getOptionAtIndex = ()=>undefined;\n        const getIndexOfId = ()=>-1;\n        const getOptionById = (id)=>{\n            return optionsById.current.get(id);\n        };\n        const getOptionsMatchingText = (matcher)=>{\n            return Array.from(optionsById.current.values()).filter(({ text })=>matcher(text));\n        };\n        const getOptionsMatchingValue = (matcher)=>{\n            const matches = [];\n            for (const option of optionsById.current.values()){\n                if (matcher(option.value)) {\n                    matches.push(option);\n                }\n            }\n            return matches;\n        };\n        return {\n            getCount,\n            getOptionAtIndex,\n            getIndexOfId,\n            getOptionById,\n            getOptionsMatchingText,\n            getOptionsMatchingValue\n        };\n    }, []);\n    const registerOption = React.useCallback((option)=>{\n        optionsById.current.set(option.id, option);\n        return ()=>optionsById.current.delete(option.id);\n    }, []);\n    return {\n        ...collectionAPI,\n        options: Array.from(optionsById.current.values()),\n        registerOption\n    };\n};\n","import * as React from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nexport const useSelection = (props)=>{\n    const { defaultSelectedOptions, multiselect, onOptionSelect } = props;\n    const [selectedOptions, setSelectedOptions] = useControllableState({\n        state: props.selectedOptions,\n        defaultState: defaultSelectedOptions,\n        initialState: []\n    });\n    const selectOption = React.useCallback((event, option)=>{\n        // if the option is disabled, do nothing\n        if (option.disabled) {\n            return;\n        }\n        // for single-select, always return the selected option\n        let newSelection = [\n            option.value\n        ];\n        // toggle selected state of the option for multiselect\n        if (multiselect) {\n            const selectedIndex = selectedOptions.findIndex((o)=>o === option.value);\n            if (selectedIndex > -1) {\n                // deselect option\n                newSelection = [\n                    ...selectedOptions.slice(0, selectedIndex),\n                    ...selectedOptions.slice(selectedIndex + 1)\n                ];\n            } else {\n                // select option\n                newSelection = [\n                    ...selectedOptions,\n                    option.value\n                ];\n            }\n        }\n        setSelectedOptions(newSelection);\n        onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {\n            optionValue: option.value,\n            optionText: option.text,\n            selectedOptions: newSelection\n        });\n    }, [\n        onOptionSelect,\n        multiselect,\n        selectedOptions,\n        setSelectedOptions\n    ]);\n    const clearSelection = (event)=>{\n        setSelectedOptions([]);\n        onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {\n            optionValue: undefined,\n            optionText: undefined,\n            selectedOptions: []\n        });\n    };\n    return {\n        clearSelection,\n        selectOption,\n        selectedOptions\n    };\n};\n","import * as React from 'react';\nimport { getIntrinsicElementProps, mergeCallbacks, useEventCallback, slot, useMergedRefs } from '@fluentui/react-utilities';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\nimport { useActiveDescendant, useActiveDescendantContext, useHasParentActiveDescendantContext } from '@fluentui/react-aria';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useOptionCollection } from '../../utils/useOptionCollection';\nimport { useSelection } from '../../utils/useSelection';\nimport { optionClassNames } from '../Option/useOptionStyles.styles';\nimport { ListboxContext, useListboxContext_unstable } from '../../contexts/ListboxContext';\nimport { useOnKeyboardNavigationChange } from '@fluentui/react-tabster';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst UNSAFE_noLongerUsed = {\n    activeOption: undefined,\n    focusVisible: false,\n    setActiveOption: ()=>null\n};\n/**\n * Create the state required to render Listbox.\n *\n * The returned state can be modified with hooks such as useListboxStyles_unstable,\n * before being passed to renderListbox_unstable.\n *\n * @param props - props from this instance of Listbox\n * @param ref - reference to root HTMLElement of Listbox\n */ export const useListbox_unstable = (props, ref)=>{\n    'use no memo';\n    const { multiselect, disableAutoFocus = false } = props;\n    const optionCollection = useOptionCollection();\n    const { listboxRef: activeDescendantListboxRef, activeParentRef, controller } = useActiveDescendant({\n        matchOption: (el)=>el.classList.contains(optionClassNames.root)\n    });\n    const hasListboxContext = useHasParentContext(ListboxContext);\n    const onActiveDescendantChange = useListboxContext_unstable((ctx)=>ctx.onActiveDescendantChange);\n    const contextGetOptionById = useListboxContext_unstable((ctx)=>ctx.getOptionById);\n    const contextGetOptionsMatchingValue = useListboxContext_unstable((ctx)=>ctx.getOptionsMatchingValue);\n    const getOptionById = hasListboxContext ? contextGetOptionById : optionCollection.getOptionById;\n    const getOptionsMatchingValue = hasListboxContext ? contextGetOptionsMatchingValue : optionCollection.getOptionsMatchingValue;\n    const listenerRef = React.useMemo(()=>{\n        let element = null;\n        const listener = (untypedEvent)=>{\n            // Typescript doesn't support custom event types on handler\n            const event = untypedEvent;\n            onActiveDescendantChange === null || onActiveDescendantChange === void 0 ? void 0 : onActiveDescendantChange(event);\n        };\n        return (el)=>{\n            if (!el) {\n                element === null || element === void 0 ? void 0 : element.removeEventListener('activedescendantchange', listener);\n                return;\n            }\n            element = el;\n            element.addEventListener('activedescendantchange', listener);\n        };\n    }, [\n        onActiveDescendantChange\n    ]);\n    const [isNavigatingWithKeyboard, setIsNavigatingWithKeyboard] = React.useState(false);\n    useOnKeyboardNavigationChange(setIsNavigatingWithKeyboard);\n    const activeDescendantContext = useActiveDescendantContext();\n    const hasParentActiveDescendantContext = useHasParentActiveDescendantContext();\n    const activeDescendantController = hasParentActiveDescendantContext ? activeDescendantContext.controller : controller;\n    const { clearSelection, selectedOptions, selectOption } = useSelection(props);\n    const onKeyDown = (event)=>{\n        const action = getDropdownActionFromKey(event, {\n            open: true\n        });\n        const activeOptionId = activeDescendantController.active();\n        const activeOption = activeOptionId ? getOptionById(activeOptionId) : null;\n        switch(action){\n            case 'First':\n            case 'Last':\n            case 'Next':\n            case 'Previous':\n            case 'PageDown':\n            case 'PageUp':\n            case 'CloseSelect':\n            case 'Select':\n                event.preventDefault();\n                break;\n        }\n        switch(action){\n            case 'Next':\n                if (activeOption) {\n                    activeDescendantController.next();\n                } else {\n                    activeDescendantController.first();\n                }\n                break;\n            case 'Previous':\n                if (activeOption) {\n                    activeDescendantController.prev();\n                } else {\n                    activeDescendantController.first();\n                }\n                break;\n            case 'PageUp':\n            case 'First':\n                activeDescendantController.first();\n                break;\n            case 'PageDown':\n            case 'Last':\n                activeDescendantController.last();\n                break;\n            case 'Select':\n            case 'CloseSelect':\n                activeOption && selectOption(event, activeOption);\n                break;\n        }\n    };\n    // get state from parent combobox, if it exists\n    const contextSelectedOptions = useListboxContext_unstable((ctx)=>ctx.selectedOptions);\n    const contextSelectOption = useListboxContext_unstable((ctx)=>ctx.selectOption);\n    // without a parent combobox context, provide values directly from Listbox\n    const optionContextValues = hasListboxContext ? {\n        selectedOptions: contextSelectedOptions,\n        selectOption: contextSelectOption,\n        ...UNSAFE_noLongerUsed\n    } : {\n        selectedOptions,\n        selectOption,\n        ...UNSAFE_noLongerUsed\n    };\n    React.useEffect(()=>{\n        // if the listbox has a parent context, that parent context should handle the activedescendant\n        if (hasParentActiveDescendantContext) {\n            return;\n        }\n        // disable focus-visible attributes until focus is received\n        activeDescendantController.hideFocusVisibleAttributes();\n        if (!disableAutoFocus) {\n            // if it is single-select and there is a selected option, start at the selected option\n            if (!multiselect && optionContextValues.selectedOptions.length > 0) {\n                const selectedOption = getOptionsMatchingValue((v)=>v === optionContextValues.selectedOptions[0]).pop();\n                if (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.id) {\n                    activeDescendantController.focus(selectedOption.id);\n                }\n            } else {\n                activeDescendantController.first();\n            }\n        }\n        return ()=>{\n            activeDescendantController.blur();\n        };\n    // this should only be run once in the lifecycle of the Listbox\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const onFocus = React.useCallback(()=>{\n        if (hasParentActiveDescendantContext) {\n            return;\n        }\n        activeDescendantController.showFocusVisibleAttributes();\n        if (isNavigatingWithKeyboard) {\n            activeDescendantController.scrollActiveIntoView();\n        }\n    }, [\n        activeDescendantController,\n        hasParentActiveDescendantContext,\n        isNavigatingWithKeyboard\n    ]);\n    const onBlur = React.useCallback(()=>{\n        if (hasParentActiveDescendantContext) {\n            return;\n        }\n        activeDescendantController.hideFocusVisibleAttributes();\n    }, [\n        activeDescendantController,\n        hasParentActiveDescendantContext\n    ]);\n    const state = {\n        components: {\n            root: 'div'\n        },\n        root: slot.always(getIntrinsicElementProps('div', {\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: useMergedRefs(ref, activeParentRef, activeDescendantListboxRef, listenerRef),\n            role: multiselect ? 'menu' : 'listbox',\n            tabIndex: 0,\n            ...props\n        }), {\n            elementType: 'div'\n        }),\n        standalone: !hasListboxContext,\n        multiselect,\n        clearSelection,\n        activeDescendantController,\n        onActiveDescendantChange,\n        ...optionCollection,\n        ...optionContextValues\n    };\n    state.root.onKeyDown = useEventCallback(mergeCallbacks(state.root.onKeyDown, onKeyDown));\n    state.root.onFocus = useEventCallback(mergeCallbacks(state.root.onFocus, onFocus));\n    state.root.onBlur = useEventCallback(mergeCallbacks(state.root.onBlur, onBlur));\n    return state;\n};\n","  import { jsx as _jsx } from \"@fluentui/react-jsx-runtime/jsx-runtime\";\nimport { assertSlots } from '@fluentui/react-utilities';\nimport { ActiveDescendantContextProvider } from '@fluentui/react-aria';\nimport { ListboxContext } from '../../contexts/ListboxContext';\n/**\n * Render the final JSX of Listbox\n */ export const renderListbox_unstable = (state, contextValues)=>{\n    assertSlots(state);\n    return /*#__PURE__*/ _jsx(ActiveDescendantContextProvider, {\n        value: contextValues.activeDescendant,\n        children: /*#__PURE__*/ _jsx(ListboxContext.Provider, {\n            value: contextValues.listbox,\n            children: /*#__PURE__*/ _jsx(state.root, {})\n        })\n    });\n};\n","import { tokens } from '@fluentui/react-theme';\nimport { __styles, mergeClasses } from '@griffel/react';\nexport const listboxClassNames = {\n  root: 'fui-Listbox'\n};\n/**\n * Styles for the root slot\n */\nconst useStyles = /*#__PURE__*/__styles({\n  root: {\n    De3pzq: \"fxugw4r\",\n    B7ck84d: \"f1ewtqcl\",\n    mc9l5x: \"f22iagw\",\n    Beiy3e4: \"f1vx9l62\",\n    Bf4jedk: \"f3hsy1e\",\n    Bmxbyg5: \"f5zp4f\",\n    Bw0xxkn: 0,\n    oeaueh: 0,\n    Bpd4iqm: 0,\n    Befb4lg: \"f1iepc6i\",\n    Byoj8tv: 0,\n    uwmqm3: 0,\n    z189sj: 0,\n    z8tnut: 0,\n    B0ocmuz: \"f1t35pdg\",\n    Belr9w4: \"fiut8dr\"\n  }\n}, {\n  d: [\".fxugw4r{background-color:var(--colorNeutralBackground1);}\", \".f1ewtqcl{box-sizing:border-box;}\", \".f22iagw{display:flex;}\", \".f1vx9l62{flex-direction:column;}\", \".f3hsy1e{min-width:160px;}\", \".f5zp4f{overflow-y:auto;}\", [\".f1iepc6i{outline:1px solid var(--colorTransparentStroke);}\", {\n    p: -1\n  }], [\".f1t35pdg{padding:var(--spacingHorizontalXS);}\", {\n    p: -1\n  }], \".fiut8dr{row-gap:var(--spacingHorizontalXXS);}\"]\n});\n/**\n * Apply styling to the Listbox slots based on the state\n */\nexport const useListboxStyles_unstable = state => {\n  'use no memo';\n\n  const styles = useStyles();\n  state.root.className = mergeClasses(listboxClassNames.root, styles.root, state.root.className);\n  return state;\n};","import * as React from 'react';\nimport { useListbox_unstable } from './useListbox';\nimport { renderListbox_unstable } from './renderListbox';\nimport { useListboxStyles_unstable } from './useListboxStyles.styles';\nimport { useListboxContextValues } from '../../contexts/useListboxContextValues';\nimport { useCustomStyleHook_unstable } from '@fluentui/react-shared-contexts';\n/**\n * Listbox component: a standalone selection control, or the popup in a Combobox\n */ export const Listbox = /*#__PURE__*/ React.forwardRef((props, ref)=>{\n    const state = useListbox_unstable(props, ref);\n    const contextValues = useListboxContextValues(state);\n    useListboxStyles_unstable(state);\n    useCustomStyleHook_unstable('useListboxStyles_unstable')(state);\n    return renderListbox_unstable(state, contextValues);\n});\nListbox.displayName = 'Listbox';\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useControllableState, useEventCallback, useFirstMount } from '@fluentui/react-utilities';\nimport { useOptionCollection } from '../utils/useOptionCollection';\nimport { useSelection } from '../utils/useSelection';\n/**\n * @internal\n * State shared between Combobox and Dropdown components\n */ export const useComboboxBaseState = (props)=>{\n    'use no memo';\n    const { appearance = 'outline', disableAutoFocus, children, clearable = false, editable = false, inlinePopup = false, mountNode = undefined, multiselect, onOpenChange, size = 'medium', activeDescendantController, freeform = false, disabled = false, onActiveOptionChange = null } = props;\n    const optionCollection = useOptionCollection();\n    const { getOptionsMatchingValue } = optionCollection;\n    const { getOptionById } = optionCollection;\n    const getActiveOption = React.useCallback(()=>{\n        const activeOptionId = activeDescendantController.active();\n        return activeOptionId ? getOptionById(activeOptionId) : undefined;\n    }, [\n        activeDescendantController,\n        getOptionById\n    ]);\n    // Keeping some kind of backwards compatible functionality here\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const UNSAFE_activeOption = getActiveOption();\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const UNSAFE_setActiveOption = React.useCallback((option)=>{\n        let nextOption = undefined;\n        if (typeof option === 'function') {\n            const activeOption = getActiveOption();\n            nextOption = option(activeOption);\n        }\n        if (nextOption) {\n            activeDescendantController.focus(nextOption.id);\n        } else {\n            activeDescendantController.blur();\n        }\n    }, [\n        activeDescendantController,\n        getActiveOption\n    ]);\n    // track whether keyboard focus outline should be shown\n    // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move\n    const [focusVisible, setFocusVisible] = React.useState(false);\n    // track focused state to conditionally render collapsed listbox\n    // when the trigger is focused - the listbox should but hidden until the open state is changed\n    const [hasFocus, setHasFocus] = React.useState(false);\n    const ignoreNextBlur = React.useRef(false);\n    // calculate value based on props, internal value changes, and selected options\n    const isFirstMount = useFirstMount();\n    const [controllableValue, setValue] = useControllableState({\n        state: props.value,\n        initialState: undefined\n    });\n    const { selectedOptions, selectOption: baseSelectOption, clearSelection } = useSelection(props);\n    // reset any typed value when an option is selected\n    const selectOption = React.useCallback((ev, option)=>{\n        ReactDOM.unstable_batchedUpdates(()=>{\n            setValue(undefined);\n            baseSelectOption(ev, option);\n        });\n    }, [\n        setValue,\n        baseSelectOption\n    ]);\n    const value = React.useMemo(()=>{\n        // don't compute the value if it is defined through props or setValue,\n        if (controllableValue !== undefined) {\n            return controllableValue;\n        }\n        // handle defaultValue here, so it is overridden by selection\n        if (isFirstMount && props.defaultValue !== undefined) {\n            return props.defaultValue;\n        }\n        const selectedOptionsText = getOptionsMatchingValue((optionValue)=>{\n            return selectedOptions.includes(optionValue);\n        }).map((option)=>option.text);\n        if (multiselect) {\n            // editable inputs should not display multiple selected options in the input as text\n            return editable ? '' : selectedOptionsText.join(', ');\n        }\n        return selectedOptionsText[0];\n    // do not change value after isFirstMount changes,\n    // we do not want to accidentally override defaultValue on a second render\n    // unless another value is intentionally set\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        controllableValue,\n        editable,\n        getOptionsMatchingValue,\n        multiselect,\n        selectedOptions\n    ]);\n    // Handle open state, which is shared with options in context\n    const [open, setOpenState] = useControllableState({\n        state: props.open,\n        defaultState: props.defaultOpen,\n        initialState: false\n    });\n    const setOpen = React.useCallback((event, newState)=>{\n        if (disabled) {\n            return;\n        }\n        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(event, {\n            open: newState\n        });\n        ReactDOM.unstable_batchedUpdates(()=>{\n            if (!newState && !freeform) {\n                setValue(undefined);\n            }\n            setOpenState(newState);\n        });\n    }, [\n        onOpenChange,\n        setOpenState,\n        setValue,\n        freeform,\n        disabled\n    ]);\n    // update active option based on change in open state\n    React.useEffect(()=>{\n        if (open) {\n            // if it is single-select and there is a selected option, start at the selected option\n            if (!multiselect && selectedOptions.length > 0) {\n                const selectedOption = getOptionsMatchingValue((v)=>v === selectedOptions[0]).pop();\n                if (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.id) {\n                    activeDescendantController.focus(selectedOption.id);\n                }\n            }\n        } else {\n            activeDescendantController.blur();\n        }\n    // this should only be run in response to changes in the open state\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        open,\n        activeDescendantController\n    ]);\n    // Fallback focus when children are updated in an open popover results in no item being focused\n    React.useEffect(()=>{\n        if (open && !disableAutoFocus && !activeDescendantController.active()) {\n            activeDescendantController.first();\n        }\n    // this should only be run in response to changes in the open state or children\n    }, [\n        open,\n        children,\n        disableAutoFocus,\n        activeDescendantController,\n        getOptionById\n    ]);\n    const onActiveDescendantChange = useEventCallback((event)=>{\n        const previousOption = event.detail.previousId ? optionCollection.getOptionById(event.detail.previousId) : null;\n        const nextOption = optionCollection.getOptionById(event.detail.id);\n        onActiveOptionChange === null || onActiveOptionChange === void 0 ? void 0 : onActiveOptionChange(event, {\n            event,\n            type: 'change',\n            previousOption,\n            nextOption\n        });\n    });\n    return {\n        ...optionCollection,\n        freeform,\n        disabled,\n        selectOption,\n        clearSelection,\n        selectedOptions,\n        activeOption: UNSAFE_activeOption,\n        appearance,\n        clearable,\n        focusVisible,\n        ignoreNextBlur,\n        inlinePopup,\n        mountNode,\n        open,\n        hasFocus,\n        setActiveOption: UNSAFE_setActiveOption,\n        setFocusVisible,\n        setHasFocus,\n        setOpen,\n        setValue,\n        size,\n        value,\n        multiselect,\n        onOptionClick: useEventCallback((e)=>{\n            if (!multiselect) {\n                setOpen(e, false);\n            }\n        }),\n        onActiveDescendantChange\n    };\n};\n","import * as React from 'react';\nimport { mergeCallbacks, useId, useEventCallback, slot, isResolvedShorthand, useMergedRefs } from '@fluentui/react-utilities';\nimport { Listbox } from '../Listbox';\n/**\n * @internal\n * @returns  listbox slot with desired behaviour and props\n */ export function useListboxSlot(listboxSlotFromProp, ref, options) {\n    const { state: { multiselect }, triggerRef, defaultProps } = options;\n    const listboxId = useId('fluent-listbox', isResolvedShorthand(listboxSlotFromProp) ? listboxSlotFromProp.id : undefined);\n    const listboxSlot = slot.optional(listboxSlotFromProp, {\n        renderByDefault: true,\n        elementType: Listbox,\n        defaultProps: {\n            id: listboxId,\n            multiselect,\n            tabIndex: undefined,\n            ...defaultProps\n        }\n    });\n    /**\n   * Clicking on the listbox should never blur the trigger\n   * in a combobox\n   */ const onMouseDown = useEventCallback(mergeCallbacks((event)=>{\n        event.preventDefault();\n    }, listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.onMouseDown));\n    const onClick = useEventCallback(mergeCallbacks((event)=>{\n        var _triggerRef_current;\n        event.preventDefault();\n        (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n    }, listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.onClick));\n    const listboxRef = useMergedRefs(listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.ref, ref);\n    if (listboxSlot) {\n        listboxSlot.ref = listboxRef;\n        listboxSlot.onMouseDown = onMouseDown;\n        listboxSlot.onClick = onClick;\n    }\n    return listboxSlot;\n}\n","import * as React from 'react';\nimport { useSetKeyboardNavigation } from '@fluentui/react-tabster';\nimport { mergeCallbacks, slot, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../utils/dropdownKeyActions';\n/**\n * Shared trigger behaviour for combobox and dropdown\n * @returns trigger slot with desired behaviour and props\n */ export function useTriggerSlot(triggerSlotFromProp, ref, options) {\n    const { state: { open, setOpen, setHasFocus }, defaultProps, elementType, activeDescendantController } = options;\n    const trigger = slot.always(triggerSlotFromProp, {\n        defaultProps: {\n            type: 'text',\n            'aria-expanded': open,\n            role: 'combobox',\n            ...typeof defaultProps === 'object' && defaultProps\n        },\n        elementType\n    });\n    // handle trigger focus/blur\n    const triggerRef = React.useRef(null);\n    trigger.ref = useMergedRefs(triggerRef, trigger.ref, ref);\n    // the trigger should open/close the popup on click or blur\n    trigger.onBlur = mergeCallbacks((event)=>{\n        setOpen(event, false);\n        setHasFocus(false);\n    }, trigger.onBlur);\n    trigger.onFocus = mergeCallbacks((event)=>{\n        if (event.target === event.currentTarget) {\n            setHasFocus(true);\n        }\n    }, trigger.onFocus);\n    trigger.onClick = mergeCallbacks((event)=>{\n        setOpen(event, !open);\n    }, trigger.onClick);\n    // handle combobox keyboard interaction\n    trigger.onKeyDown = mergeCallbacks(useTriggerKeydown({\n        activeDescendantController,\n        ...options.state\n    }), trigger.onKeyDown);\n    return trigger;\n}\nfunction useTriggerKeydown(options) {\n    const { activeDescendantController, getOptionById, setOpen, selectOption, multiselect, open } = options;\n    const getActiveOption = React.useCallback(()=>{\n        const activeOptionId = activeDescendantController.active();\n        return activeOptionId ? getOptionById(activeOptionId) : undefined;\n    }, [\n        activeDescendantController,\n        getOptionById\n    ]);\n    const first = ()=>{\n        activeDescendantController.first();\n    };\n    const last = ()=>{\n        activeDescendantController.last();\n    };\n    const next = (activeOption)=>{\n        if (activeOption) {\n            activeDescendantController.next();\n        } else {\n            activeDescendantController.first();\n        }\n    };\n    const previous = (activeOption)=>{\n        if (activeOption) {\n            activeDescendantController.prev();\n        } else {\n            activeDescendantController.first();\n        }\n    };\n    const pageUp = ()=>{\n        for(let i = 0; i < 10; i++){\n            activeDescendantController.prev();\n        }\n    };\n    const pageDown = ()=>{\n        for(let i = 0; i < 10; i++){\n            activeDescendantController.next();\n        }\n    };\n    const setKeyboardNavigation = useSetKeyboardNavigation();\n    return useEventCallback((e)=>{\n        const action = getDropdownActionFromKey(e, {\n            open,\n            multiselect\n        });\n        const activeOption = getActiveOption();\n        switch(action){\n            case 'First':\n            case 'Last':\n            case 'Next':\n            case 'Previous':\n            case 'PageDown':\n            case 'PageUp':\n            case 'Open':\n            case 'Close':\n            case 'CloseSelect':\n            case 'Select':\n                e.preventDefault();\n                break;\n        }\n        setKeyboardNavigation(true);\n        switch(action){\n            case 'First':\n                first();\n                break;\n            case 'Last':\n                last();\n                break;\n            case 'Next':\n                next(activeOption);\n                break;\n            case 'Previous':\n                previous(activeOption);\n                break;\n            case 'PageDown':\n                pageDown();\n                break;\n            case 'PageUp':\n                pageUp();\n                break;\n            case 'Open':\n                setOpen(e, true);\n                break;\n            case 'Close':\n                // stop propagation for escape key to avoid dismissing any parent popups\n                e.stopPropagation();\n                setOpen(e, false);\n                break;\n            case 'CloseSelect':\n                !multiselect && !(activeOption === null || activeOption === void 0 ? void 0 : activeOption.disabled) && setOpen(e, false);\n            // fallthrough\n            case 'Select':\n                activeOption && selectOption(e, activeOption);\n                break;\n            case 'Tab':\n                !multiselect && activeOption && selectOption(e, activeOption);\n                break;\n        }\n    });\n}\n"],"names":["useOnKeyboardNavigationChange","callback","keyborgRef","useKeyborgRef","eventCallback","useEventCallback","React.useEffect","keyborg","cb","next","useSetKeyboardNavigation","React.useCallback","isNavigatingWithKeyboard","_keyborgRef_current","useOptionWalker","options","matchOption","targetDocument","useFluent","treeWalkerRef","React.useRef","listboxRef","optionFilter","node","isHTMLElement","setListbox","el","React.useMemo","predicate","startFrom","start","cur","ACTIVEDESCENDANT_ATTRIBUTE","ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE","scrollIntoView","target","scrollParent","findScrollableParent","offsetHeight","offsetTop","getTotalOffsetTop","scrollMarginTop","scrollMarginBottom","getScrollMargins","parentOffsetHeight","scrollTop","isAbove","isBelow","buffer","element","_element_ownerDocument","win","computedStyles","_getIntValueOfComputedStyle","getIntValueOfComputedStyle","_getIntValueOfComputedStyle1","computedStyle","createActiveDescendantChangeEvent","detail","useActiveDescendant","imperativeRef","matchOptionUnstable","focusVisibleRef","shouldShowFocusVisibleAttrRef","activeIdRef","lastActiveIdRef","activeParentRef","attributeVisibilityRef","removeAttribute","_activeParentRef_current","setAttribute","id","active","getActiveDescendant","optionWalker","listboxCallbackRef","_listboxRef_current","setShouldShowFocusVisibleAttribute","shouldShow","blurActiveDescendant","_active_id","focusActiveDescendant","nextActive","previousActiveId","event","controller","passive","first","last","_getActiveDescendant","React.useImperativeHandle","useMergedRefs","useListboxContextValues","state","hasListboxContext","useHasParentContext","ListboxContext","getOptionById","getOptionsMatchingValue","multiselect","registerOption","selectedOptions","selectOption","activeDescendantController","parentRegisterOption","useListboxContext_unstable","ctx","onOptionClick","onActiveDescendantChange","listbox","activeDescendant","getDropdownActionFromKey","open","code","altKey","ctrlKey","key","metaKey","keys.Space","keys.ArrowUp","keys.Enter","keys.Escape","keys.ArrowDown","keys.Home","keys.End","keys.PageUp","keys.PageDown","keys.Tab","useOptionCollection","optionsById","collectionAPI","matcher","text","matches","option","useSelection","props","defaultSelectedOptions","onOptionSelect","setSelectedOptions","useControllableState","newSelection","selectedIndex","o","UNSAFE_noLongerUsed","useListbox_unstable","ref","disableAutoFocus","optionCollection","activeDescendantListboxRef","optionClassNames","contextGetOptionById","contextGetOptionsMatchingValue","listenerRef","listener","untypedEvent","setIsNavigatingWithKeyboard","React.useState","activeDescendantContext","useActiveDescendantContext","hasParentActiveDescendantContext","useHasParentActiveDescendantContext","clearSelection","onKeyDown","action","activeOptionId","activeOption","contextSelectedOptions","contextSelectOption","optionContextValues","selectedOption","v","onFocus","onBlur","slot.always","getIntrinsicElementProps","mergeCallbacks","renderListbox_unstable","contextValues","_jsx","ActiveDescendantContextProvider","listboxClassNames","useStyles","__styles","useListboxStyles_unstable","styles","mergeClasses","Listbox","React.forwardRef","useCustomStyleHook_unstable","useComboboxBaseState","appearance","children","clearable","editable","inlinePopup","mountNode","onOpenChange","size","freeform","disabled","onActiveOptionChange","getActiveOption","UNSAFE_activeOption","UNSAFE_setActiveOption","nextOption","focusVisible","setFocusVisible","hasFocus","setHasFocus","ignoreNextBlur","isFirstMount","useFirstMount","controllableValue","setValue","baseSelectOption","ev","ReactDOM.unstable_batchedUpdates","value","selectedOptionsText","optionValue","setOpenState","setOpen","newState","previousOption","e","useListboxSlot","listboxSlotFromProp","triggerRef","defaultProps","listboxId","useId","isResolvedShorthand","listboxSlot","slot.optional","onMouseDown","onClick","_triggerRef_current","useTriggerSlot","triggerSlotFromProp","elementType","trigger","useTriggerKeydown","previous","pageUp","i","pageDown","setKeyboardNavigation"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}