{"version":3,"file":"useInputTriggerSlot-CQSU_q7z.js","sources":["../../node_modules/.pnpm/@fluentui+react-combobox@9._a64055e78c6288918f19b853e336ac9e/node_modules/@fluentui/react-combobox/lib/components/Combobox/useInputTriggerSlot.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, useEventCallback } from '@fluentui/react-utilities';\nimport { ArrowLeft, ArrowRight } from '@fluentui/keyboard-keys';\nimport { useTriggerSlot } from '../../utils/useTriggerSlot';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\n/**\n * @internal\n * useInputTriggerSlot returns a tuple of trigger/listbox shorthand,\n * with the semantics and event handlers needed for the Combobox and Dropdown components.\n * The element type of the ref should always match the element type used in the trigger shorthand.\n */ export function useInputTriggerSlot(triggerFromProps, ref, options) {\n    'use no memo';\n    const { state: { open, value, selectOption, setValue, multiselect, selectedOptions, clearSelection, getOptionById, setOpen }, freeform, defaultProps, activeDescendantController } = options;\n    const onBlur = (event)=>{\n        // handle selection and updating value if freeform is false\n        if (!open && !freeform) {\n            const activeOptionId = activeDescendantController.active();\n            const activeOption = activeOptionId ? getOptionById(activeOptionId) : null;\n            // select matching option, if the value fully matches\n            if (value && activeOption && value.trim().toLowerCase() === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.text.toLowerCase())) {\n                selectOption(event, activeOption);\n            }\n            // reset typed value when the input loses focus while collapsed, unless freeform is true\n            setValue(undefined);\n        }\n    };\n    const getOptionFromInput = (inputValue)=>{\n        const searchString = inputValue === null || inputValue === void 0 ? void 0 : inputValue.trim().toLowerCase();\n        if (!searchString || searchString.length === 0) {\n            activeDescendantController.blur();\n            return;\n        }\n        const matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString) === 0;\n        const match = activeDescendantController.find((id)=>{\n            const option = getOptionById(id);\n            return !!option && matcher(option.text);\n        });\n        if (!match) {\n            activeDescendantController.blur();\n            return undefined;\n        }\n        return getOptionById(match);\n    };\n    // update value and active option based on input\n    const onChange = (event)=>{\n        const inputValue = event.target.value;\n        // update uncontrolled value\n        setValue(inputValue);\n        // handle updating active option based on input\n        const matchingOption = getOptionFromInput(inputValue);\n        // clear selection for single-select if the input value no longer matches the selection\n        if (!multiselect && selectedOptions.length === 1 && (inputValue.length < 1 || !matchingOption)) {\n            clearSelection(event);\n        }\n    };\n    const trigger = useTriggerSlot(triggerFromProps, ref, {\n        state: options.state,\n        defaultProps,\n        elementType: 'input',\n        activeDescendantController\n    });\n    trigger.onChange = mergeCallbacks(trigger.onChange, onChange);\n    trigger.onBlur = mergeCallbacks(trigger.onBlur, onBlur);\n    // NVDA and JAWS have bugs that suppress reading the input value text when aria-activedescendant is set\n    // To prevent this, we clear the HTML attribute (but save the state) when a user presses left/right arrows\n    // ref: https://github.com/microsoft/fluentui/issues/26359#issuecomment-1397759888\n    const [hideActiveDescendant, setHideActiveDescendant] = React.useState(false);\n    // save the typing vs. navigating options state, as the space key should behave differently in each case\n    // we do not want to update the combobox when this changes, just save the value between renders\n    const isTyping = React.useRef(false);\n    /**\n   * Freeform combobox should not select\n   */ const defaultOnKeyDown = trigger.onKeyDown;\n    const onKeyDown = useEventCallback((event)=>{\n        if (!open && getDropdownActionFromKey(event) === 'Type') {\n            setOpen(event, true);\n        }\n        // clear activedescendant when moving the text insertion cursor\n        if (event.key === ArrowLeft || event.key === ArrowRight) {\n            setHideActiveDescendant(true);\n        } else {\n            setHideActiveDescendant(false);\n        }\n        // update typing state to true if the user is typing\n        const action = getDropdownActionFromKey(event, {\n            open,\n            multiselect\n        });\n        if (action === 'Type') {\n            isTyping.current = true;\n        } else if (action === 'Open' && event.key !== ' ' || action === 'Next' || action === 'Previous' || action === 'First' || action === 'Last' || action === 'PageUp' || action === 'PageDown') {\n            isTyping.current = false;\n        }\n        // allow space to insert a character if freeform & the last action was typing, or if the popup is closed\n        if ((isTyping.current || !open) && event.key === ' ') {\n            var _triggerFromProps_onKeyDown;\n            triggerFromProps === null || triggerFromProps === void 0 ? void 0 : (_triggerFromProps_onKeyDown = triggerFromProps.onKeyDown) === null || _triggerFromProps_onKeyDown === void 0 ? void 0 : _triggerFromProps_onKeyDown.call(triggerFromProps, event);\n            return;\n        }\n        defaultOnKeyDown === null || defaultOnKeyDown === void 0 ? void 0 : defaultOnKeyDown(event);\n    });\n    trigger.onKeyDown = onKeyDown;\n    if (hideActiveDescendant) {\n        trigger['aria-activedescendant'] = undefined;\n    }\n    return trigger;\n}\n"],"names":["useInputTriggerSlot","triggerFromProps","ref","options","open","value","selectOption","setValue","multiselect","selectedOptions","clearSelection","getOptionById","setOpen","freeform","defaultProps","activeDescendantController","onBlur","event","activeOptionId","activeOption","getOptionFromInput","inputValue","searchString","matcher","optionText","match","id","option","onChange","matchingOption","trigger","useTriggerSlot","mergeCallbacks","hideActiveDescendant","setHideActiveDescendant","React.useState","isTyping","React.useRef","defaultOnKeyDown","onKeyDown","useEventCallback","getDropdownActionFromKey","ArrowLeft","ArrowRight","action","_triggerFromProps_onKeyDown"],"mappings":"4HAUW,SAASA,EAAoBC,EAAkBC,EAAKC,EAAS,CACpE,cACA,KAAM,CAAE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,aAAAC,EAAc,SAAAC,EAAU,YAAAC,EAAa,gBAAAC,EAAiB,eAAAC,EAAgB,cAAAC,EAAe,QAAAC,CAAS,EAAE,SAAAC,EAAU,aAAAC,EAAc,2BAAAC,CAA0B,EAAKZ,EAC/Ka,EAAUC,GAAQ,CAEpB,GAAI,CAACb,GAAQ,CAACS,EAAU,CACpB,MAAMK,EAAiBH,EAA2B,OAAQ,EACpDI,EAAeD,EAAiBP,EAAcO,CAAc,EAAI,KAElEb,GAASc,GAAgBd,EAAM,KAAM,EAAC,YAAW,KAAQc,GAAiB,KAAkC,OAASA,EAAa,KAAK,YAAW,IAClJb,EAAaW,EAAOE,CAAY,EAGpCZ,EAAS,MAAS,CAC9B,CACK,EACKa,EAAsBC,GAAa,CACrC,MAAMC,EAAeD,GAAe,KAAgC,OAASA,EAAW,KAAM,EAAC,YAAa,EAC5G,GAAI,CAACC,GAAgBA,EAAa,SAAW,EAAG,CAC5CP,EAA2B,KAAM,EACjC,MACZ,CACQ,MAAMQ,EAAWC,GAAaA,EAAW,YAAW,EAAG,QAAQF,CAAY,IAAM,EAC3EG,EAAQV,EAA2B,KAAMW,GAAK,CAChD,MAAMC,EAAShB,EAAce,CAAE,EAC/B,MAAO,CAAC,CAACC,GAAUJ,EAAQI,EAAO,IAAI,CAClD,CAAS,EACD,GAAI,CAACF,EAAO,CACRV,EAA2B,KAAM,EACjC,MACZ,CACQ,OAAOJ,EAAcc,CAAK,CAC7B,EAEKG,EAAYX,GAAQ,CACtB,MAAMI,EAAaJ,EAAM,OAAO,MAEhCV,EAASc,CAAU,EAEnB,MAAMQ,EAAiBT,EAAmBC,CAAU,EAEhD,CAACb,GAAeC,EAAgB,SAAW,IAAMY,EAAW,OAAS,GAAK,CAACQ,IAC3EnB,EAAeO,CAAK,CAE3B,EACKa,EAAUC,EAAe9B,EAAkBC,EAAK,CAClD,MAAOC,EAAQ,MACf,aAAAW,EACA,YAAa,QACb,2BAAAC,CACR,CAAK,EACDe,EAAQ,SAAWE,EAAeF,EAAQ,SAAUF,CAAQ,EAC5DE,EAAQ,OAASE,EAAeF,EAAQ,OAAQd,CAAM,EAItD,KAAM,CAACiB,EAAsBC,CAAuB,EAAIC,EAAAA,SAAe,EAAK,EAGtEC,EAAWC,EAAY,OAAC,EAAK,EAG3BC,EAAmBR,EAAQ,UAC7BS,EAAYC,EAAkBvB,GAAQ,CACpC,CAACb,GAAQqC,EAAyBxB,CAAK,IAAM,QAC7CL,EAAQK,EAAO,EAAI,EAGnBA,EAAM,MAAQyB,GAAazB,EAAM,MAAQ0B,EACzCT,EAAwB,EAAI,EAE5BA,EAAwB,EAAK,EAGjC,MAAMU,EAASH,EAAyBxB,EAAO,CAC3C,KAAAb,EACA,YAAAI,CACZ,CAAS,EAOD,GANIoC,IAAW,OACXR,EAAS,QAAU,IACZQ,IAAW,QAAU3B,EAAM,MAAQ,KAAO2B,IAAW,QAAUA,IAAW,YAAcA,IAAW,SAAWA,IAAW,QAAUA,IAAW,UAAYA,IAAW,cAC5KR,EAAS,QAAU,KAGlBA,EAAS,SAAW,CAAChC,IAASa,EAAM,MAAQ,IAAK,CAClD,IAAI4B,EACJ5C,GAAqB,OAAgD4C,EAA8B5C,EAAiB,aAAe,MAAQ4C,IAAgC,QAAkBA,EAA4B,KAAK5C,EAAkBgB,CAAK,EACrP,MACZ,CACQqB,GAAqB,MAA+CA,EAAiBrB,CAAK,CAClG,CAAK,EACD,OAAAa,EAAQ,UAAYS,EAChBN,IACAH,EAAQ,uBAAuB,EAAI,QAEhCA,CACX","x_google_ignoreList":[0]}