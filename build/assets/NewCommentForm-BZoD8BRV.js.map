{"version":3,"file":"NewCommentForm-BZoD8BRV.js","sources":["../../src/components/Comments/NewCommentForm.tsx"],"sourcesContent":["import { Button, Field, Textarea } from \"@fluentui/react-components\";\r\nimport { useForm } from \"@tanstack/react-form\";\r\nimport { type } from \"arktype\";\r\nimport { useFormInitQuery } from \"../../hooks/useFormInitQuery\";\r\nimport dayjs from \"dayjs\";\r\nimport type { Comment } from \"../../types\";\r\nimport { CommentAddRegular } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useFieldContext } from \"../../hooks/formContext\";\r\n\r\nexport default () => {\r\n    const { t } = useTranslation();\r\n    const { currentUser, configuration } = useFormInitQuery();\r\n    const comments = useFieldContext<Comment[]>();\r\n    const commentForm = useForm({\r\n        defaultValues: {\r\n            comment: ''\r\n        },\r\n        validators: {\r\n            onSubmit: type({\r\n                comment: \"string > 5\"\r\n            })\r\n        }\r\n    });\r\n    \r\n    return (\r\n        <commentForm.Field\r\n            name=\"comment\"\r\n            children={(field) => {\r\n                const addComment = async () => {\r\n                    const validationErrors = await commentForm.validateField(\"comment\", \"submit\");\r\n                    if (validationErrors.length < 1) {\r\n                        comments.insertValue(0, {\r\n                            Type: \"COMMENT\",\r\n                            Author: currentUser.CommonName!,\r\n                            UserName: currentUser.UserName!,\r\n                            Directory: currentUser.Directory!,\r\n                            Created: dayjs().toISOString(),\r\n                            ProcessInstId: configuration.WF_PROCESS_INST_ID,\r\n                            ProcessName: configuration.WF_PROCESS_NAME,\r\n                            ActivityInstId: configuration.WF_ACTIVITY_ID,\r\n                            ActivityName: configuration.WF_ACTIVITY_NAME,\r\n                            Comment: field.state.value\r\n                        });\r\n                        commentForm.reset();\r\n                    }\r\n                };\r\n                return (<>\r\n                    <Field \r\n                        hint={t('Shift-Enter for a new line')} \r\n                        validationMessage={field.state.meta.isTouched && field.state.meta.errors.length > 0 ? t(field.state.meta.errors.join(', '), { field: '', length: 6, actual: field.state.value.length }) : null}\r\n                    >\r\n                        <Textarea\r\n                            resize=\"vertical\"\r\n                            onKeyDown={event => {\r\n                                if (event.key === \"Enter\") {\r\n                                    if (!event.shiftKey) {\r\n                                        event.preventDefault();\r\n                                        addComment();\r\n                                    }\r\n                                }\r\n                            }}\r\n                            value={field.state.value}\r\n                            onChange={(e) => field.handleChange(e.target.value)}\r\n                        />\r\n                    </Field>\r\n                    <commentForm.Subscribe\r\n                        selector={(state) => [state.canSubmit, state.isSubmitting]}\r\n                        children={([canSubmit, isSubmitting]) => (\r\n                            <div>\r\n                                <Button\r\n                                    disabled={!canSubmit || isSubmitting}\r\n                                    appearance=\"transparent\"\r\n                                    icon={<CommentAddRegular />}\r\n                                    onClick={addComment}\r\n                                >\r\n                                    {t('Add Comment')}\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                    />\r\n\r\n                </>);\r\n            }}\r\n        />\r\n    );\r\n};"],"names":["NewCommentForm","t","useTranslation","currentUser","configuration","useFormInitQuery","comments","useFieldContext","commentForm","useForm","type","jsx","field","addComment","dayjs","jsxs","Fragment","Field","Textarea","event","state","canSubmit","isSubmitting","Button","CommentAddRegular"],"mappings":"mHAUA,MAAAA,EAAe,IAAM,CACX,KAAA,CAAE,EAAAC,CAAE,EAAIC,EAAe,EACvB,CAAE,YAAAC,EAAa,cAAAC,CAAc,EAAIC,EAAiB,EAClDC,EAAWC,EAA2B,EACtCC,EAAcC,EAAQ,CACxB,cAAe,CACX,QAAS,EACb,EACA,WAAY,CACR,SAAUC,EAAK,CACX,QAAS,YACZ,CAAA,CAAA,CACL,CACH,EAGG,OAAAC,EAAA,IAACH,EAAY,MAAZ,CACG,KAAK,UACL,SAAWI,GAAU,CACjB,MAAMC,EAAa,SAAY,EACF,MAAML,EAAY,cAAc,UAAW,QAAQ,GACvD,OAAS,IAC1BF,EAAS,YAAY,EAAG,CACpB,KAAM,UACN,OAAQH,EAAY,WACpB,SAAUA,EAAY,SACtB,UAAWA,EAAY,UACvB,QAASW,EAAM,EAAE,YAAY,EAC7B,cAAeV,EAAc,mBAC7B,YAAaA,EAAc,gBAC3B,eAAgBA,EAAc,eAC9B,aAAcA,EAAc,iBAC5B,QAASQ,EAAM,MAAM,KAAA,CACxB,EACDJ,EAAY,MAAM,EAE1B,EACA,OACIO,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAL,EAAA,IAACM,EAAA,CACG,KAAMhB,EAAE,4BAA4B,EACpC,kBAAmBW,EAAM,MAAM,KAAK,WAAaA,EAAM,MAAM,KAAK,OAAO,OAAS,EAAIX,EAAEW,EAAM,MAAM,KAAK,OAAO,KAAK,IAAI,EAAG,CAAE,MAAO,GAAI,OAAQ,EAAG,OAAQA,EAAM,MAAM,MAAM,MAAA,CAAQ,EAAI,KAE1L,SAAAD,EAAA,IAACO,EAAA,CACG,OAAO,WACP,UAAoBC,GAAA,CACZA,EAAM,MAAQ,UACTA,EAAM,WACPA,EAAM,eAAe,EACVN,EAAA,GAGvB,EACA,MAAOD,EAAM,MAAM,MACnB,SAAW,GAAMA,EAAM,aAAa,EAAE,OAAO,KAAK,CAAA,CAAA,CACtD,CACJ,EACAD,EAAA,IAACH,EAAY,UAAZ,CACG,SAAWY,GAAU,CAACA,EAAM,UAAWA,EAAM,YAAY,EACzD,SAAU,CAAC,CAACC,EAAWC,CAAY,UAC9B,MACG,CAAA,SAAAX,EAAA,IAACY,EAAA,CACG,SAAU,CAACF,GAAaC,EACxB,WAAW,cACX,WAAOE,EAAkB,EAAA,EACzB,QAASX,EAER,WAAE,aAAa,CAAA,CAAA,CAExB,CAAA,CAAA,CAAA,CAER,EAEJ,CAAA,CACJ,CACJ,CAER"}