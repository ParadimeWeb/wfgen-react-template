{"version":3,"file":"NumberField-DQoihQGc.js","sources":["../../src/components/FormFields/NumberField.tsx"],"sourcesContent":["import { Field, Input, mergeClasses, Text, type FieldProps, type InputProps, type TextProps } from \"@fluentui/react-components\";\r\nimport { csvToSet, NumberParser } from \"../../utils\";\r\nimport { useForm, useStore } from \"@tanstack/react-form\";\r\nimport { type } from \"arktype\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { NumberRowRegular } from \"@fluentui/react-icons\";\r\nimport { useFormInitQuery } from \"../../hooks/useFormInitQuery\";\r\nimport { usePrintStyles } from \"./TextField\";\r\nimport { useWfgFormContext } from \"../../hooks/useWfgFormContext\";\r\nimport { useFieldContext } from \"../../hooks/formContext\";\r\n\r\ntype NumberFieldProps = InputProps & {\r\n    fieldProps?: FieldProps\r\n    readonlyFieldProps?: FieldProps\r\n    readonlyInputProps?: InputProps\r\n    printFieldProps?: FieldProps\r\n    printTextProps?: TextProps\r\n    style?: \"decimal\" | \"percent\" | \"currency\" | \"unit\"\r\n    currency?: 'USD' | 'CAD'\r\n};\r\n\r\nfunction PrintView(props: NumberFieldProps) {\r\n    const { printFieldProps = props.fieldProps, printTextProps = {}, style = 'decimal', currency = 'USD' } = props;\r\n    const styles = usePrintStyles();\r\n    const { t } = useTranslation();\r\n    const field = useFieldContext<number | null>();\r\n    const { locale } = useFormInitQuery();\r\n    const numberFormat = Intl.NumberFormat(locale, { style, currency });\r\n\r\n    return (\r\n        <Field\r\n            label={t(field.name)}\r\n            {...printFieldProps}\r\n        >\r\n            <Text \r\n                className={mergeClasses(styles.text, printFieldProps?.size === 'small' && styles.small, printFieldProps?.size === 'large' && styles.large, printTextProps.className)}\r\n            >\r\n                {field.state.value === null ? '' : numberFormat.format(field.state.value)}\r\n            </Text>\r\n        </Field>\r\n    );\r\n}\r\nfunction ReadonlyView(props: NumberFieldProps) {\r\n    const { readonlyFieldProps = props.fieldProps, readonlyInputProps = {}, style = 'decimal', currency = 'USD' } = props;\r\n    const styles = usePrintStyles();\r\n    const { t } = useTranslation();\r\n    const field = useFieldContext<number | null>();\r\n    const { locale } = useFormInitQuery();\r\n    const { form } = useWfgFormContext();\r\n    const parts = Intl.NumberFormat(locale, { style, currency }).formatToParts();\r\n    const currencySign = parts.find(p => p.type === 'currency')?.value ?? '';\r\n    const percentSign = parts.find(p => p.type === 'percentSign')?.value ?? '';\r\n    const numberFormat = Intl.NumberFormat(locale, { style, currency });\r\n\r\n    return (\r\n        <form.Subscribe \r\n            selector={s => s.values.Table1[0].FORM_FIELDS_REQUIRED}\r\n            children={FORM_FIELDS_REQUIRED => {\r\n                const requiredFields = csvToSet(FORM_FIELDS_REQUIRED);\r\n                const required = requiredFields.has(field.name.replace('Table1[0].', ''));\r\n                return (\r\n                    <Field\r\n                        required={required}\r\n                        label={t(field.name)}\r\n                        {...readonlyFieldProps}\r\n                    >\r\n                        <Input\r\n                            readOnly\r\n                            className={styles.readonly}\r\n                            contentAfter={style === 'currency' ? <Text size={400}>{currencySign}</Text> : style === 'percent' ? <Text size={400}>{percentSign}</Text> : <NumberRowRegular />}\r\n                            defaultValue={field.state.value === null ? '' : numberFormat.format(field.state.value)}\r\n                            {...readonlyInputProps}\r\n                        />\r\n                    </Field>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n}\r\nfunction View(props: NumberFieldProps) {\r\n    const { fieldProps = {}, readonlyFieldProps, readonlyInputProps, printFieldProps, printTextProps, style = 'decimal', currency = 'USD', ...inputProps } = props;\r\n    const { t } = useTranslation();\r\n    const field = useFieldContext<number | null>();\r\n    const { locale } = useFormInitQuery();\r\n    const { form } = useWfgFormContext();\r\n    const parts = Intl.NumberFormat(locale, { style, currency }).formatToParts();\r\n    const currencySign = parts.find(p => p.type === 'currency')?.value ?? '';\r\n    const percentSign = parts.find(p => p.type === 'percentSign')?.value ?? '';\r\n    const numberFormat = Intl.NumberFormat(locale, style === 'currency' ? { maximumFractionDigits: 2, minimumFractionDigits: 2 } : style === 'percent' ? { maximumFractionDigits: 0, minimumFractionDigits: 0 } : undefined);\r\n    const numberParser = new NumberParser(locale);\r\n    const value = field.state.value === null ? null : style === 'percent' ? field.state.value*100 : field.state.value;\r\n    const numberForm = useForm({\r\n        defaultValues: {\r\n            formattedValue: value === null ? '' : numberFormat.format(value)\r\n        },\r\n        validators: {\r\n            onChange: type({\r\n                formattedValue: type.string.narrow((s) => {\r\n                    if (s.length === 0) {\r\n                        field.handleChange(null);\r\n                        return true;\r\n                    }\r\n                    const n = numberParser.tryParse(s);\r\n                    if (n === undefined) {\r\n                        return false;\r\n                    }\r\n                    field.handleChange(style === 'percent' ? n/100 : n);\r\n                    return true;\r\n                }).configure({\r\n                    message: ctx => t('{{actual}} is not a valid number', { actual: ctx.actual })\r\n                })\r\n            })\r\n        }\r\n    });\r\n    \r\n    return (\r\n        <form.Subscribe \r\n            selector={s => s.values.Table1[0].FORM_FIELDS_REQUIRED}\r\n            children={FORM_FIELDS_REQUIRED => {\r\n                const requiredFields = csvToSet(FORM_FIELDS_REQUIRED);\r\n                const required = requiredFields.has(field.name.replace('Table1[0].', ''));\r\n                return (\r\n                    <numberForm.Field \r\n                        name=\"formattedValue\"\r\n                        children={(formattedField) => {\r\n                            return (\r\n                                <Field\r\n                                    required={required}\r\n                                    label={t(field.name)}\r\n                                    validationMessage={formattedField.state.meta.isTouched && formattedField.state.meta.errors.length ? formattedField.state.meta.errors[0]?.message : field.state.meta.isTouched && field.state.meta.errors.length > 0 ? t(field.state.meta.errors[0], { length: field.state.meta.errors[0].rule, actual: formattedField.state.value.length }) : null}\r\n                                    {...fieldProps}\r\n                                >\r\n                                    <Input\r\n                                        contentAfter={style === 'currency' ? <Text size={400}>{currencySign}</Text> : style === 'percent' ? <Text size={400}>{percentSign}</Text> : <NumberRowRegular />}\r\n                                        value={formattedField.state.value}\r\n                                        onBlur={() => {\r\n                                            if (form.state.isValid && value !== null) {\r\n                                                if (!Number.isInteger(value)) {\r\n                                                    if (style === 'percent') {\r\n                                                        field.setValue(Math.round(value)/100);\r\n                                                    }\r\n                                                    else if (style === 'currency' && value.toString().split('.')[1].length > 2) {\r\n                                                        field.setValue(Math.round(value * 100) / 100);\r\n                                                    }\r\n                                                }\r\n                                                formattedField.setValue(numberFormat.format(value));\r\n                                            }\r\n                                        }}\r\n                                        onChange={(_, { value }) => {\r\n                                            formattedField.handleChange(value);\r\n                                        }}\r\n                                        {...inputProps}\r\n                                    />\r\n                                </Field>\r\n                            );\r\n                        }}\r\n                    />\r\n                );\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default (props: NumberFieldProps) => {\r\n    const field = useFieldContext();\r\n    const { form, printForm: { state: { values: { open: isPrintView } } } } = useWfgFormContext();\r\n    const { isArchive } = useFormInitQuery();\r\n    const FORM_FIELDS_READONLY = useStore(form.store, s => s.values.Table1[0].FORM_FIELDS_READONLY ?? '');\r\n    const readonlyFields = csvToSet(FORM_FIELDS_READONLY);\r\n    return isPrintView ? <PrintView {...props} /> : isArchive || readonlyFields.has(field.name.replace('Table1[0].', '')) ? <ReadonlyView {...props} /> : <View {...props} />;\r\n}"],"names":["PrintView","props","printFieldProps","printTextProps","style","currency","styles","usePrintStyles","t","useTranslation","field","useFieldContext","locale","useFormInitQuery","numberFormat","jsx","Field","Text","mergeClasses","ReadonlyView","readonlyFieldProps","readonlyInputProps","form","useWfgFormContext","parts","currencySign","_a","p","percentSign","_b","s","FORM_FIELDS_REQUIRED","required","csvToSet","Input","NumberRowRegular","View","fieldProps","inputProps","numberParser","NumberParser","value","numberForm","useForm","type","n","ctx","formattedField","_","NumberField","isPrintView","isArchive","FORM_FIELDS_READONLY","useStore","readonlyFields"],"mappings":"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"}